// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]

  // todo: make Profile and add to Profile
  createdIssues  Issue[] @relation("createdByUser")
  assignedIssues Issue[] @relation("assignedTo")
  updatedIssues  Issue[] @relation("updatedByUser")

  createdProjects  Project[] @relation("p_createdByUser")
  updatedProjects  Project[] @relation("p_updatedByUser")
  assignedProjects Project[] @relation("p_assignedTo")

  createdTeams Team[] @relation("t_createdByUser")
  updatedTeams Team[] @relation("t_updatedByUser")
  inTeams      Team[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model Issue {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String
  createdBy   User     @relation(name: "createdByUser", fields: [createdById], references: [id])
  createdById Int

  priority String?

  assignedTo   User? @relation(name: "assignedTo", fields: [assignedToId], references: [id])
  assignedToId Int?

  updatedAt   DateTime? @updatedAt
  updatedBy   User?     @relation(name: "updatedByUser", fields: [updatedById], references: [id])
  updatedById Int?

  assignedToProject Project? @relation(name: "assignedToProject", fields: [projectId], references: [id])
  projectId         Int?

  files File[]
}

model File {
  id      Int    @id @default(autoincrement())
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId Int
  url     String
}

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String

  createdBy   User @relation(name: "p_createdByUser", fields: [createdById], references: [id])
  createdById Int

  updatedAt   DateTime? @updatedAt
  updatedBy   User?     @relation(name: "p_updatedByUser", fields: [updatedById], references: [id])
  updatedById Int?

  assignedIssues Issue[] @relation("assignedToProject")

  assignedTo     User? @relation(name: "p_assignedTo", fields: [assignedUserId], references: [id])
  assignedUserId Int?

  assignedTeam   Team? @relation(name: "assignedTeam", fields: [assignedTeamId], references: [id])
  assignedTeamId Int?
}

model Team {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String

  createdBy   User @relation(name: "t_createdByUser", fields: [createdById], references: [id])
  createdById Int

  updatedAt   DateTime? @updatedAt
  updatedBy   User?     @relation(name: "t_updatedByUser", fields: [updatedById], references: [id])
  updatedById Int?

  members User[]

  assignedProjects Project[] @relation("assignedTeam")
}
